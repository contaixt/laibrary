# rust-crate (1.2.3)

# rust-crate

Demonstrates Rust library features through data processing and text formatting.

```rust
use rust_crate::text::{Format, TextFormatter};

let fmt = TextFormatter::new(Format::Capitalise);
assert_eq!(fmt.format("hello world")?, "Hello World");
```

# API

## rust_crate::text

```
//! Provides text formatting functionality through the TextFormatter type.

/// Text formatting options available in the library.
///
/// # Example
/// ```
/// use rust_crate::text::Format;
///
/// let format = Format::Capitalise;
/// ```
#[derive(Debug, Clone, Copy)]
pub enum Format {
    /// Convert text to uppercase
    Uppercase,
    /// Convert text to lowercase
    Lowercase,
    /// Capitalise first letter of each word
    Capitalise,
}

/// A text formatter that applies various formatting rules.
///
/// # Example
/// ```
/// use rust_crate::text::{Format, TextFormatter};
///
/// let formatter = TextFormatter::new(Format::Uppercase);
/// let result = formatter.format("hello").unwrap();
/// assert_eq!(result, "HELLO");
/// ```
pub struct TextFormatter {
    format: Format,
}

impl TextFormatter {
    /// Creates a new text formatter with the specified format.
    pub fn new(format: Format) -> Self;

    /// Formats the input text according to the formatter's rules.
    ///
    /// # Errors
    ///
    /// Returns an error if:
    /// - The input text is empty
    /// - The text contains invalid UTF-8 characters
    pub fn format(&self, text: &str) -> Result<String, FormatterError>;

    /// Formats a stream of text chunks according to the formatter's rules.
    ///
    /// # Example
    /// ```
    /// use rust_crate::text::{Format, TextFormatter};
    ///
    /// # async fn run() {
    /// let formatter = TextFormatter::new(Format::Uppercase);
    /// let chunks = ["hello", "world"].into_iter();
    /// let formatted = formatter.format_stream(chunks).await;
    /// # }
    /// ```
    pub async fn format_stream<'a, I>(&'a self, iter: I) -> Vec<Result<String, FormatterError>>
    where
        I: Iterator<Item = &'a str>;
}

/// Error types that can occur during text formatting.
#[derive(Debug)]
pub enum FormatterError {
    /// The input text was empty
    EmptyInput,
    /// The text contains invalid UTF-8 characters
    InvalidEncoding,
}

impl fmt::Display for FormatterError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result;
}

impl Error for FormatterError {}

/// A macro for quick text uppercasing.
///
/// # Example
/// ```
/// use rust_crate::uppercase;
///
/// assert_eq!(uppercase!("hello"), "HELLO");
/// ```
#[macro_export]
macro_rules! uppercase {
    ($text:expr) => { ... };
}
```
